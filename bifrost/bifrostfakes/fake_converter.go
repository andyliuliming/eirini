// Code generated by counterfeiter. DO NOT EDIT.
package bifrostfakes

import (
	"net/http"
	"sync"

	"code.cloudfoundry.org/eirini"
	"code.cloudfoundry.org/eirini/bifrost"
	"code.cloudfoundry.org/eirini/opi"
	"code.cloudfoundry.org/lager"
)

type FakeConverter struct {
	ConvertStub        func(request eirini.DesireLRPRequest, registryUrl string, registryIP string, cfClient eirini.CfClient, client *http.Client, log lager.Logger) opi.LRP
	convertMutex       sync.RWMutex
	convertArgsForCall []struct {
		request     eirini.DesireLRPRequest
		registryUrl string
		registryIP  string
		cfClient    eirini.CfClient
		client      *http.Client
		log         lager.Logger
	}
	convertReturns struct {
		result1 opi.LRP
	}
	convertReturnsOnCall map[int]struct {
		result1 opi.LRP
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConverter) Convert(request eirini.DesireLRPRequest, registryUrl string, registryIP string, cfClient eirini.CfClient, client *http.Client, log lager.Logger) opi.LRP {
	fake.convertMutex.Lock()
	ret, specificReturn := fake.convertReturnsOnCall[len(fake.convertArgsForCall)]
	fake.convertArgsForCall = append(fake.convertArgsForCall, struct {
		request     eirini.DesireLRPRequest
		registryUrl string
		registryIP  string
		cfClient    eirini.CfClient
		client      *http.Client
		log         lager.Logger
	}{request, registryUrl, registryIP, cfClient, client, log})
	fake.recordInvocation("Convert", []interface{}{request, registryUrl, registryIP, cfClient, client, log})
	fake.convertMutex.Unlock()
	if fake.ConvertStub != nil {
		return fake.ConvertStub(request, registryUrl, registryIP, cfClient, client, log)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.convertReturns.result1
}

func (fake *FakeConverter) ConvertCallCount() int {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return len(fake.convertArgsForCall)
}

func (fake *FakeConverter) ConvertArgsForCall(i int) (eirini.DesireLRPRequest, string, string, eirini.CfClient, *http.Client, lager.Logger) {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return fake.convertArgsForCall[i].request, fake.convertArgsForCall[i].registryUrl, fake.convertArgsForCall[i].registryIP, fake.convertArgsForCall[i].cfClient, fake.convertArgsForCall[i].client, fake.convertArgsForCall[i].log
}

func (fake *FakeConverter) ConvertReturns(result1 opi.LRP) {
	fake.ConvertStub = nil
	fake.convertReturns = struct {
		result1 opi.LRP
	}{result1}
}

func (fake *FakeConverter) ConvertReturnsOnCall(i int, result1 opi.LRP) {
	fake.ConvertStub = nil
	if fake.convertReturnsOnCall == nil {
		fake.convertReturnsOnCall = make(map[int]struct {
			result1 opi.LRP
		})
	}
	fake.convertReturnsOnCall[i] = struct {
		result1 opi.LRP
	}{result1}
}

func (fake *FakeConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bifrost.Converter = new(FakeConverter)
