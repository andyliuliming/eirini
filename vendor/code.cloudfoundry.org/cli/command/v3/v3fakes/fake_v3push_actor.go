// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/pushaction"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3PushActor struct {
	ActualizeStub        func(state pushaction.PushState, progressBar pushaction.ProgressBar) (<-chan pushaction.PushState, <-chan pushaction.Event, <-chan pushaction.Warnings, <-chan error)
	actualizeMutex       sync.RWMutex
	actualizeArgsForCall []struct {
		state       pushaction.PushState
		progressBar pushaction.ProgressBar
	}
	actualizeReturns struct {
		result1 <-chan pushaction.PushState
		result2 <-chan pushaction.Event
		result3 <-chan pushaction.Warnings
		result4 <-chan error
	}
	actualizeReturnsOnCall map[int]struct {
		result1 <-chan pushaction.PushState
		result2 <-chan pushaction.Event
		result3 <-chan pushaction.Warnings
		result4 <-chan error
	}
	ConceptualizeStub        func(setting pushaction.CommandLineSettings, spaceGUID string) ([]pushaction.PushState, pushaction.Warnings, error)
	conceptualizeMutex       sync.RWMutex
	conceptualizeArgsForCall []struct {
		setting   pushaction.CommandLineSettings
		spaceGUID string
	}
	conceptualizeReturns struct {
		result1 []pushaction.PushState
		result2 pushaction.Warnings
		result3 error
	}
	conceptualizeReturnsOnCall map[int]struct {
		result1 []pushaction.PushState
		result2 pushaction.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3PushActor) Actualize(state pushaction.PushState, progressBar pushaction.ProgressBar) (<-chan pushaction.PushState, <-chan pushaction.Event, <-chan pushaction.Warnings, <-chan error) {
	fake.actualizeMutex.Lock()
	ret, specificReturn := fake.actualizeReturnsOnCall[len(fake.actualizeArgsForCall)]
	fake.actualizeArgsForCall = append(fake.actualizeArgsForCall, struct {
		state       pushaction.PushState
		progressBar pushaction.ProgressBar
	}{state, progressBar})
	fake.recordInvocation("Actualize", []interface{}{state, progressBar})
	fake.actualizeMutex.Unlock()
	if fake.ActualizeStub != nil {
		return fake.ActualizeStub(state, progressBar)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.actualizeReturns.result1, fake.actualizeReturns.result2, fake.actualizeReturns.result3, fake.actualizeReturns.result4
}

func (fake *FakeV3PushActor) ActualizeCallCount() int {
	fake.actualizeMutex.RLock()
	defer fake.actualizeMutex.RUnlock()
	return len(fake.actualizeArgsForCall)
}

func (fake *FakeV3PushActor) ActualizeArgsForCall(i int) (pushaction.PushState, pushaction.ProgressBar) {
	fake.actualizeMutex.RLock()
	defer fake.actualizeMutex.RUnlock()
	return fake.actualizeArgsForCall[i].state, fake.actualizeArgsForCall[i].progressBar
}

func (fake *FakeV3PushActor) ActualizeReturns(result1 <-chan pushaction.PushState, result2 <-chan pushaction.Event, result3 <-chan pushaction.Warnings, result4 <-chan error) {
	fake.ActualizeStub = nil
	fake.actualizeReturns = struct {
		result1 <-chan pushaction.PushState
		result2 <-chan pushaction.Event
		result3 <-chan pushaction.Warnings
		result4 <-chan error
	}{result1, result2, result3, result4}
}

func (fake *FakeV3PushActor) ActualizeReturnsOnCall(i int, result1 <-chan pushaction.PushState, result2 <-chan pushaction.Event, result3 <-chan pushaction.Warnings, result4 <-chan error) {
	fake.ActualizeStub = nil
	if fake.actualizeReturnsOnCall == nil {
		fake.actualizeReturnsOnCall = make(map[int]struct {
			result1 <-chan pushaction.PushState
			result2 <-chan pushaction.Event
			result3 <-chan pushaction.Warnings
			result4 <-chan error
		})
	}
	fake.actualizeReturnsOnCall[i] = struct {
		result1 <-chan pushaction.PushState
		result2 <-chan pushaction.Event
		result3 <-chan pushaction.Warnings
		result4 <-chan error
	}{result1, result2, result3, result4}
}

func (fake *FakeV3PushActor) Conceptualize(setting pushaction.CommandLineSettings, spaceGUID string) ([]pushaction.PushState, pushaction.Warnings, error) {
	fake.conceptualizeMutex.Lock()
	ret, specificReturn := fake.conceptualizeReturnsOnCall[len(fake.conceptualizeArgsForCall)]
	fake.conceptualizeArgsForCall = append(fake.conceptualizeArgsForCall, struct {
		setting   pushaction.CommandLineSettings
		spaceGUID string
	}{setting, spaceGUID})
	fake.recordInvocation("Conceptualize", []interface{}{setting, spaceGUID})
	fake.conceptualizeMutex.Unlock()
	if fake.ConceptualizeStub != nil {
		return fake.ConceptualizeStub(setting, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.conceptualizeReturns.result1, fake.conceptualizeReturns.result2, fake.conceptualizeReturns.result3
}

func (fake *FakeV3PushActor) ConceptualizeCallCount() int {
	fake.conceptualizeMutex.RLock()
	defer fake.conceptualizeMutex.RUnlock()
	return len(fake.conceptualizeArgsForCall)
}

func (fake *FakeV3PushActor) ConceptualizeArgsForCall(i int) (pushaction.CommandLineSettings, string) {
	fake.conceptualizeMutex.RLock()
	defer fake.conceptualizeMutex.RUnlock()
	return fake.conceptualizeArgsForCall[i].setting, fake.conceptualizeArgsForCall[i].spaceGUID
}

func (fake *FakeV3PushActor) ConceptualizeReturns(result1 []pushaction.PushState, result2 pushaction.Warnings, result3 error) {
	fake.ConceptualizeStub = nil
	fake.conceptualizeReturns = struct {
		result1 []pushaction.PushState
		result2 pushaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3PushActor) ConceptualizeReturnsOnCall(i int, result1 []pushaction.PushState, result2 pushaction.Warnings, result3 error) {
	fake.ConceptualizeStub = nil
	if fake.conceptualizeReturnsOnCall == nil {
		fake.conceptualizeReturnsOnCall = make(map[int]struct {
			result1 []pushaction.PushState
			result2 pushaction.Warnings
			result3 error
		})
	}
	fake.conceptualizeReturnsOnCall[i] = struct {
		result1 []pushaction.PushState
		result2 pushaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3PushActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.actualizeMutex.RLock()
	defer fake.actualizeMutex.RUnlock()
	fake.conceptualizeMutex.RLock()
	defer fake.conceptualizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3PushActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3PushActor = new(FakeV3PushActor)
