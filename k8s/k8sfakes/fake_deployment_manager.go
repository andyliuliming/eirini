// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/k8s"
	"code.cloudfoundry.org/eirini/opi"
)

type FakeDeploymentManager struct {
	ListLRPsStub        func() ([]opi.LRP, error)
	listLRPsMutex       sync.RWMutex
	listLRPsArgsForCall []struct{}
	listLRPsReturns     struct {
		result1 []opi.LRP
		result2 error
	}
	listLRPsReturnsOnCall map[int]struct {
		result1 []opi.LRP
		result2 error
	}
	DeleteStub        func(appName string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		appName string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	CreateStub        func(*opi.LRP) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *opi.LRP
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeploymentManager) ListLRPs() ([]opi.LRP, error) {
	fake.listLRPsMutex.Lock()
	ret, specificReturn := fake.listLRPsReturnsOnCall[len(fake.listLRPsArgsForCall)]
	fake.listLRPsArgsForCall = append(fake.listLRPsArgsForCall, struct{}{})
	fake.recordInvocation("ListLRPs", []interface{}{})
	fake.listLRPsMutex.Unlock()
	if fake.ListLRPsStub != nil {
		return fake.ListLRPsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listLRPsReturns.result1, fake.listLRPsReturns.result2
}

func (fake *FakeDeploymentManager) ListLRPsCallCount() int {
	fake.listLRPsMutex.RLock()
	defer fake.listLRPsMutex.RUnlock()
	return len(fake.listLRPsArgsForCall)
}

func (fake *FakeDeploymentManager) ListLRPsReturns(result1 []opi.LRP, result2 error) {
	fake.ListLRPsStub = nil
	fake.listLRPsReturns = struct {
		result1 []opi.LRP
		result2 error
	}{result1, result2}
}

func (fake *FakeDeploymentManager) ListLRPsReturnsOnCall(i int, result1 []opi.LRP, result2 error) {
	fake.ListLRPsStub = nil
	if fake.listLRPsReturnsOnCall == nil {
		fake.listLRPsReturnsOnCall = make(map[int]struct {
			result1 []opi.LRP
			result2 error
		})
	}
	fake.listLRPsReturnsOnCall[i] = struct {
		result1 []opi.LRP
		result2 error
	}{result1, result2}
}

func (fake *FakeDeploymentManager) Delete(appName string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("Delete", []interface{}{appName})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(appName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeDeploymentManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDeploymentManager) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].appName
}

func (fake *FakeDeploymentManager) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentManager) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentManager) Create(arg1 *opi.LRP) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *opi.LRP
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeDeploymentManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDeploymentManager) CreateArgsForCall(i int) *opi.LRP {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeDeploymentManager) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentManager) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listLRPsMutex.RLock()
	defer fake.listLRPsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeploymentManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.DeploymentManager = new(FakeDeploymentManager)
