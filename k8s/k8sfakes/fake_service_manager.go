// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini"
	"code.cloudfoundry.org/eirini/k8s"
	"code.cloudfoundry.org/eirini/opi"
)

type FakeServiceManager struct {
	ListRoutesStub        func() ([]*eirini.Routes, error)
	listRoutesMutex       sync.RWMutex
	listRoutesArgsForCall []struct{}
	listRoutesReturns     struct {
		result1 []*eirini.Routes
		result2 error
	}
	listRoutesReturnsOnCall map[int]struct {
		result1 []*eirini.Routes
		result2 error
	}
	CreateStub        func(lrp *opi.LRP) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		lrp *opi.LRP
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	CreateHeadlessStub        func(lrp *opi.LRP) error
	createHeadlessMutex       sync.RWMutex
	createHeadlessArgsForCall []struct {
		lrp *opi.LRP
	}
	createHeadlessReturns struct {
		result1 error
	}
	createHeadlessReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(lrp *opi.LRP) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		lrp *opi.LRP
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(appName string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		appName string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteHeadlessStub        func(appName string) error
	deleteHeadlessMutex       sync.RWMutex
	deleteHeadlessArgsForCall []struct {
		appName string
	}
	deleteHeadlessReturns struct {
		result1 error
	}
	deleteHeadlessReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceManager) ListRoutes() ([]*eirini.Routes, error) {
	fake.listRoutesMutex.Lock()
	ret, specificReturn := fake.listRoutesReturnsOnCall[len(fake.listRoutesArgsForCall)]
	fake.listRoutesArgsForCall = append(fake.listRoutesArgsForCall, struct{}{})
	fake.recordInvocation("ListRoutes", []interface{}{})
	fake.listRoutesMutex.Unlock()
	if fake.ListRoutesStub != nil {
		return fake.ListRoutesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listRoutesReturns.result1, fake.listRoutesReturns.result2
}

func (fake *FakeServiceManager) ListRoutesCallCount() int {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	return len(fake.listRoutesArgsForCall)
}

func (fake *FakeServiceManager) ListRoutesReturns(result1 []*eirini.Routes, result2 error) {
	fake.ListRoutesStub = nil
	fake.listRoutesReturns = struct {
		result1 []*eirini.Routes
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceManager) ListRoutesReturnsOnCall(i int, result1 []*eirini.Routes, result2 error) {
	fake.ListRoutesStub = nil
	if fake.listRoutesReturnsOnCall == nil {
		fake.listRoutesReturnsOnCall = make(map[int]struct {
			result1 []*eirini.Routes
			result2 error
		})
	}
	fake.listRoutesReturnsOnCall[i] = struct {
		result1 []*eirini.Routes
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceManager) Create(lrp *opi.LRP) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		lrp *opi.LRP
	}{lrp})
	fake.recordInvocation("Create", []interface{}{lrp})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(lrp)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeServiceManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeServiceManager) CreateArgsForCall(i int) *opi.LRP {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].lrp
}

func (fake *FakeServiceManager) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) CreateHeadless(lrp *opi.LRP) error {
	fake.createHeadlessMutex.Lock()
	ret, specificReturn := fake.createHeadlessReturnsOnCall[len(fake.createHeadlessArgsForCall)]
	fake.createHeadlessArgsForCall = append(fake.createHeadlessArgsForCall, struct {
		lrp *opi.LRP
	}{lrp})
	fake.recordInvocation("CreateHeadless", []interface{}{lrp})
	fake.createHeadlessMutex.Unlock()
	if fake.CreateHeadlessStub != nil {
		return fake.CreateHeadlessStub(lrp)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createHeadlessReturns.result1
}

func (fake *FakeServiceManager) CreateHeadlessCallCount() int {
	fake.createHeadlessMutex.RLock()
	defer fake.createHeadlessMutex.RUnlock()
	return len(fake.createHeadlessArgsForCall)
}

func (fake *FakeServiceManager) CreateHeadlessArgsForCall(i int) *opi.LRP {
	fake.createHeadlessMutex.RLock()
	defer fake.createHeadlessMutex.RUnlock()
	return fake.createHeadlessArgsForCall[i].lrp
}

func (fake *FakeServiceManager) CreateHeadlessReturns(result1 error) {
	fake.CreateHeadlessStub = nil
	fake.createHeadlessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) CreateHeadlessReturnsOnCall(i int, result1 error) {
	fake.CreateHeadlessStub = nil
	if fake.createHeadlessReturnsOnCall == nil {
		fake.createHeadlessReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createHeadlessReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) Update(lrp *opi.LRP) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		lrp *opi.LRP
	}{lrp})
	fake.recordInvocation("Update", []interface{}{lrp})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(lrp)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeServiceManager) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeServiceManager) UpdateArgsForCall(i int) *opi.LRP {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].lrp
}

func (fake *FakeServiceManager) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) Delete(appName string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("Delete", []interface{}{appName})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(appName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeServiceManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServiceManager) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].appName
}

func (fake *FakeServiceManager) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) DeleteHeadless(appName string) error {
	fake.deleteHeadlessMutex.Lock()
	ret, specificReturn := fake.deleteHeadlessReturnsOnCall[len(fake.deleteHeadlessArgsForCall)]
	fake.deleteHeadlessArgsForCall = append(fake.deleteHeadlessArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("DeleteHeadless", []interface{}{appName})
	fake.deleteHeadlessMutex.Unlock()
	if fake.DeleteHeadlessStub != nil {
		return fake.DeleteHeadlessStub(appName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteHeadlessReturns.result1
}

func (fake *FakeServiceManager) DeleteHeadlessCallCount() int {
	fake.deleteHeadlessMutex.RLock()
	defer fake.deleteHeadlessMutex.RUnlock()
	return len(fake.deleteHeadlessArgsForCall)
}

func (fake *FakeServiceManager) DeleteHeadlessArgsForCall(i int) string {
	fake.deleteHeadlessMutex.RLock()
	defer fake.deleteHeadlessMutex.RUnlock()
	return fake.deleteHeadlessArgsForCall[i].appName
}

func (fake *FakeServiceManager) DeleteHeadlessReturns(result1 error) {
	fake.DeleteHeadlessStub = nil
	fake.deleteHeadlessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) DeleteHeadlessReturnsOnCall(i int, result1 error) {
	fake.DeleteHeadlessStub = nil
	if fake.deleteHeadlessReturnsOnCall == nil {
		fake.deleteHeadlessReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteHeadlessReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.createHeadlessMutex.RLock()
	defer fake.createHeadlessMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.deleteHeadlessMutex.RLock()
	defer fake.deleteHeadlessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.ServiceManager = new(FakeServiceManager)
