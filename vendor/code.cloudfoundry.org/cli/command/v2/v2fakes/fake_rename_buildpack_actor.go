// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeRenameBuildpackActor struct {
	GetBuildpackByNameStub        func(name string) (v2action.Buildpack, v2action.Warnings, error)
	getBuildpackByNameMutex       sync.RWMutex
	getBuildpackByNameArgsForCall []struct {
		name string
	}
	getBuildpackByNameReturns struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}
	getBuildpackByNameReturnsOnCall map[int]struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}
	UpdateBuildpackStub        func(buildpack v2action.Buildpack) (v2action.Buildpack, v2action.Warnings, error)
	updateBuildpackMutex       sync.RWMutex
	updateBuildpackArgsForCall []struct {
		buildpack v2action.Buildpack
	}
	updateBuildpackReturns struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}
	updateBuildpackReturnsOnCall map[int]struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRenameBuildpackActor) GetBuildpackByName(name string) (v2action.Buildpack, v2action.Warnings, error) {
	fake.getBuildpackByNameMutex.Lock()
	ret, specificReturn := fake.getBuildpackByNameReturnsOnCall[len(fake.getBuildpackByNameArgsForCall)]
	fake.getBuildpackByNameArgsForCall = append(fake.getBuildpackByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetBuildpackByName", []interface{}{name})
	fake.getBuildpackByNameMutex.Unlock()
	if fake.GetBuildpackByNameStub != nil {
		return fake.GetBuildpackByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getBuildpackByNameReturns.result1, fake.getBuildpackByNameReturns.result2, fake.getBuildpackByNameReturns.result3
}

func (fake *FakeRenameBuildpackActor) GetBuildpackByNameCallCount() int {
	fake.getBuildpackByNameMutex.RLock()
	defer fake.getBuildpackByNameMutex.RUnlock()
	return len(fake.getBuildpackByNameArgsForCall)
}

func (fake *FakeRenameBuildpackActor) GetBuildpackByNameArgsForCall(i int) string {
	fake.getBuildpackByNameMutex.RLock()
	defer fake.getBuildpackByNameMutex.RUnlock()
	return fake.getBuildpackByNameArgsForCall[i].name
}

func (fake *FakeRenameBuildpackActor) GetBuildpackByNameReturns(result1 v2action.Buildpack, result2 v2action.Warnings, result3 error) {
	fake.GetBuildpackByNameStub = nil
	fake.getBuildpackByNameReturns = struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameBuildpackActor) GetBuildpackByNameReturnsOnCall(i int, result1 v2action.Buildpack, result2 v2action.Warnings, result3 error) {
	fake.GetBuildpackByNameStub = nil
	if fake.getBuildpackByNameReturnsOnCall == nil {
		fake.getBuildpackByNameReturnsOnCall = make(map[int]struct {
			result1 v2action.Buildpack
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getBuildpackByNameReturnsOnCall[i] = struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameBuildpackActor) UpdateBuildpack(buildpack v2action.Buildpack) (v2action.Buildpack, v2action.Warnings, error) {
	fake.updateBuildpackMutex.Lock()
	ret, specificReturn := fake.updateBuildpackReturnsOnCall[len(fake.updateBuildpackArgsForCall)]
	fake.updateBuildpackArgsForCall = append(fake.updateBuildpackArgsForCall, struct {
		buildpack v2action.Buildpack
	}{buildpack})
	fake.recordInvocation("UpdateBuildpack", []interface{}{buildpack})
	fake.updateBuildpackMutex.Unlock()
	if fake.UpdateBuildpackStub != nil {
		return fake.UpdateBuildpackStub(buildpack)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.updateBuildpackReturns.result1, fake.updateBuildpackReturns.result2, fake.updateBuildpackReturns.result3
}

func (fake *FakeRenameBuildpackActor) UpdateBuildpackCallCount() int {
	fake.updateBuildpackMutex.RLock()
	defer fake.updateBuildpackMutex.RUnlock()
	return len(fake.updateBuildpackArgsForCall)
}

func (fake *FakeRenameBuildpackActor) UpdateBuildpackArgsForCall(i int) v2action.Buildpack {
	fake.updateBuildpackMutex.RLock()
	defer fake.updateBuildpackMutex.RUnlock()
	return fake.updateBuildpackArgsForCall[i].buildpack
}

func (fake *FakeRenameBuildpackActor) UpdateBuildpackReturns(result1 v2action.Buildpack, result2 v2action.Warnings, result3 error) {
	fake.UpdateBuildpackStub = nil
	fake.updateBuildpackReturns = struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameBuildpackActor) UpdateBuildpackReturnsOnCall(i int, result1 v2action.Buildpack, result2 v2action.Warnings, result3 error) {
	fake.UpdateBuildpackStub = nil
	if fake.updateBuildpackReturnsOnCall == nil {
		fake.updateBuildpackReturnsOnCall = make(map[int]struct {
			result1 v2action.Buildpack
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.updateBuildpackReturnsOnCall[i] = struct {
		result1 v2action.Buildpack
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameBuildpackActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildpackByNameMutex.RLock()
	defer fake.getBuildpackByNameMutex.RUnlock()
	fake.updateBuildpackMutex.RLock()
	defer fake.updateBuildpackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRenameBuildpackActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.RenameBuildpackActor = new(FakeRenameBuildpackActor)
