// Code generated by counterfeiter. DO NOT EDIT.
package eirinifakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/eirini"
	"code.cloudfoundry.org/runtimeschema/cc_messages"
)

type FakeStager struct {
	StageStub        func(string, cc_messages.StagingRequestFromCC) error
	stageMutex       sync.RWMutex
	stageArgsForCall []struct {
		arg1 string
		arg2 cc_messages.StagingRequestFromCC
	}
	stageReturns struct {
		result1 error
	}
	stageReturnsOnCall map[int]struct {
		result1 error
	}
	CompleteStagingStub        func(*models.TaskCallbackResponse) error
	completeStagingMutex       sync.RWMutex
	completeStagingArgsForCall []struct {
		arg1 *models.TaskCallbackResponse
	}
	completeStagingReturns struct {
		result1 error
	}
	completeStagingReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStager) Stage(arg1 string, arg2 cc_messages.StagingRequestFromCC) error {
	fake.stageMutex.Lock()
	ret, specificReturn := fake.stageReturnsOnCall[len(fake.stageArgsForCall)]
	fake.stageArgsForCall = append(fake.stageArgsForCall, struct {
		arg1 string
		arg2 cc_messages.StagingRequestFromCC
	}{arg1, arg2})
	fake.recordInvocation("Stage", []interface{}{arg1, arg2})
	fake.stageMutex.Unlock()
	if fake.StageStub != nil {
		return fake.StageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.stageReturns.result1
}

func (fake *FakeStager) StageCallCount() int {
	fake.stageMutex.RLock()
	defer fake.stageMutex.RUnlock()
	return len(fake.stageArgsForCall)
}

func (fake *FakeStager) StageArgsForCall(i int) (string, cc_messages.StagingRequestFromCC) {
	fake.stageMutex.RLock()
	defer fake.stageMutex.RUnlock()
	return fake.stageArgsForCall[i].arg1, fake.stageArgsForCall[i].arg2
}

func (fake *FakeStager) StageReturns(result1 error) {
	fake.StageStub = nil
	fake.stageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStager) StageReturnsOnCall(i int, result1 error) {
	fake.StageStub = nil
	if fake.stageReturnsOnCall == nil {
		fake.stageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStager) CompleteStaging(arg1 *models.TaskCallbackResponse) error {
	fake.completeStagingMutex.Lock()
	ret, specificReturn := fake.completeStagingReturnsOnCall[len(fake.completeStagingArgsForCall)]
	fake.completeStagingArgsForCall = append(fake.completeStagingArgsForCall, struct {
		arg1 *models.TaskCallbackResponse
	}{arg1})
	fake.recordInvocation("CompleteStaging", []interface{}{arg1})
	fake.completeStagingMutex.Unlock()
	if fake.CompleteStagingStub != nil {
		return fake.CompleteStagingStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.completeStagingReturns.result1
}

func (fake *FakeStager) CompleteStagingCallCount() int {
	fake.completeStagingMutex.RLock()
	defer fake.completeStagingMutex.RUnlock()
	return len(fake.completeStagingArgsForCall)
}

func (fake *FakeStager) CompleteStagingArgsForCall(i int) *models.TaskCallbackResponse {
	fake.completeStagingMutex.RLock()
	defer fake.completeStagingMutex.RUnlock()
	return fake.completeStagingArgsForCall[i].arg1
}

func (fake *FakeStager) CompleteStagingReturns(result1 error) {
	fake.CompleteStagingStub = nil
	fake.completeStagingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStager) CompleteStagingReturnsOnCall(i int, result1 error) {
	fake.CompleteStagingStub = nil
	if fake.completeStagingReturnsOnCall == nil {
		fake.completeStagingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.completeStagingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stageMutex.RLock()
	defer fake.stageMutex.RUnlock()
	fake.completeStagingMutex.RLock()
	defer fake.completeStagingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eirini.Stager = new(FakeStager)
